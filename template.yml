# This file describes the serverless stack that serves as the back-end for the Littermap application.
#
# Quick reference links:
#
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-resources-and-properties.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
# https://theburningmonk.com/cloudformation-ref-and-getatt-cheatsheet/

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Global location submission and retrieval system

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs14.x

Resources:
  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: littermap-api
      StageName: !Ref DeploymentStage
      OpenApiVersion: 3.0.3 # See: https://spec.openapis.org/oas/v3.0.3#introduction
      Auth:
        Authorizers: []

  PostgresLib:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lib-postgres
      ContentUri: lib/postgres
      CompatibleRuntimes:
        - nodejs14.x
    Metadata:
      BuildMethod: makefile

  LogEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: log-event
      CodeUri: functions/log-event
      Description: Record a single event in the event log table
      Role: !GetAtt LogEventFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EventTable

  AddLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: add-location
      CodeUri: functions/add-location
      Description: Add a location
      Role: !GetAtt AddLocationFunctionRole.Arn
      Layers:
        - !Ref PostgresLib
      Environment:
        Variables:
          PGHOST: !GetAtt MainDB.Endpoint.Address
          PGPORT: !GetAtt MainDB.Endpoint.Port
          PGDATABASE: !Ref DBName
          PGUSER: writer
          PGPASSWORD: !Ref DBWriterPassword
      Events:
        AddLocation:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /add
            Method: POST

  AddLocationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  GetLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-location
      CodeUri: functions/get-location
      Description: Retrieve a location by its id
      Role: !GetAtt DBAdminFunctionRole.Arn
      Layers:
        - !Ref PostgresLib
      Environment:
        Variables:
          PGHOST: !GetAtt MainDB.Endpoint.Address
          PGPORT: !GetAtt MainDB.Endpoint.Port
          PGDATABASE: !Ref DBName
          PGUSER: reader
          PGPASSWORD: !Ref DBReaderPassword
      Events:
        GetLocationById:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /id/{id}
            Method: GET

  DBInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: db-init
      CodeUri: functions/db-init
      Description: Administrative lambda that initilizes the littermap-db database
      Role: !GetAtt DBAdminFunctionRole.Arn
      Timeout: 10
      Layers:
        - !Ref PostgresLib
      Environment:
        Variables:
          PGHOST: !GetAtt MainDB.Endpoint.Address
          PGPORT: !GetAtt MainDB.Endpoint.Port
          PGDATABASE: !Ref DBName
          PGUSER: !Ref DBAdminUser
          PGPASSWORD: !Ref DBAdminPassword
          DB_WRITER_PASSWORD: !Ref DBWriterPassword
          DB_READER_PASSWORD: !Ref DBReaderPassword

  DBRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: db-run
      CodeUri: functions/db-run
      Description: Runs a database query (as administrator)
      Role: !GetAtt DBAdminFunctionRole.Arn
      Layers:
        - !Ref PostgresLib
      Environment:
        Variables:
          PGHOST: !GetAtt MainDB.Endpoint.Address
          PGPORT: !GetAtt MainDB.Endpoint.Port
          PGDATABASE: !Ref DBName
          DB_ADMIN: !Ref DBAdminUser
          DB_ADMIN_PASSWORD: !Ref DBAdminPassword
          DB_WRITER_PASSWORD: !Ref DBWriterPassword
          DB_READER_PASSWORD: !Ref DBReaderPassword

  LogEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: eventlog-write
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:PutItem
                Resource: !GetAtt EventTable.Arn
                Effect: Allow

  DBAdminFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  AllowDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-rds-connect
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: rds-db:connect
            Resource: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${MainDB}
            Effect: Allow
      Roles:
        - Ref: DBAdminFunctionRole
          Ref: AddLocationFunctionRole

  AllowLogEventPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allow-log-event
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: lambda:InvokeFunction
            Resource: !GetAtt LogEventFunction.Arn
            Effect: Allow
      Roles:
        - Ref: AddLocationFunctionRole

  # Main database that stores the world
  MainDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBName
      DBSnapshotIdentifier: !If [HasDBSnapshotIdentifier, !Ref DBSnapshotIdentifier, !Ref 'AWS::NoValue']
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: !Ref DBPostgresVersion
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      BackupRetentionPeriod: 0 # no automated backups
      MasterUsername: !Ref DBAdminUser
      MasterUserPassword: !Ref DBAdminPassword

  # Event log
  EventTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: littermap-events
      AttributeDefinitions:
        - AttributeName: date_key
          AttributeType: S
        - AttributeName: time_key
          AttributeType: S
      KeySchema:
        - AttributeName: date_key
          KeyType: HASH
        - AttributeName: time_key
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref EventLogReadCapacity
        WriteCapacityUnits: !Ref EventLogWriteCapacity

Parameters:
  DeploymentStage:
    Description: Deployment stage
    Type: String
    Default: dev
  DBInstanceClass:
    Description: Database instance class
    Type: String
    Default: db.t2.micro
  DBPostgresVersion:
    Description: PostgreSQL version
    Type: String
    Default: 12.7
  DBAllocatedStorage:
    Description: Allocated storage (in GB)
    Type: Number
    Default: 5
  DBSnapshotIdentifier:
    Description: Provide the database snapshot id if you don't want a new database
    Type: String
  DBName:
    Description: Database name
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: littermap
  DBAdminUser:
    Description: Database admin username
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: litteradmin
  DBAdminPassword:
    Description: Database admin password
    Type: String
    MinLength: 8
    MaxLength: 128
    AllowedPattern: "[^\\s@\"\\/]*"
    ConstraintDescription: 'The password must be 8 to 128 characters and can include any printable ASCII character except "/", """, or "@"'
    Default: makeitpristine
  DBWriterPassword:
    Description: Database write access password
    Type: String
    MinLength: 8
    MaxLength: 128
    AllowedPattern: "[^\\s@\"\\/]*"
    ConstraintDescription: 'The password must be 8 to 128 characters and can include any printable ASCII character except "/", """, or "@"'
    Default: recorder
  DBReaderPassword:
    Description: Database reader access password
    Type: String
    MinLength: 8
    MaxLength: 128
    AllowedPattern: "[^\\s@\"\\/]*"
    ConstraintDescription: 'The password must be 8 to 128 characters and can include any printable ASCII character except "/", """, or "@"'
    Default: observer
  EventLogReadCapacity:
    Description: Event log database provisioned read capacity
    Type: Number
    Default: 1
  EventLogWriteCapacity:
    Description: Event log database provisioned write capacity
    Type: Number
    Default: 1

Conditions:
  HasNotDBSnapshotIdentifier: !Equals [!Ref DBSnapshotIdentifier, '']
  HasDBSnapshotIdentifier: !Not [!Condition HasNotDBSnapshotIdentifier]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database Configuration"
        Parameters:
          - DBInstanceClass
          - DBPostgresVersion
          - DBAllocatedStorage
          - DBSnapshotIdentifier
          - DBAdminUser
          - DBAdminPassword
          - DBWriterPassword
          - DBReaderPassword

Outputs:
  MainDBHost:
    Description: Database remote host
    Value: !Sub "postgresql://${MainDB.Endpoint.Address}:${MainDB.Endpoint.Port}/${DBName}"
  API:
    Description: Endpoint URL
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${API.Stage}/"
  Application:
    Description: Manage this application
    Value: !Sub "https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/applications/${AWS::StackName}"
