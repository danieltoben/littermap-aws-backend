#!/usr/bin/env sh

source ../config

if [[ $account == "" || $region == "" ]] ; then
  echo "Please configure your AWS details in the configuration file in the base directory"
  exit
fi

if [[ $# -eq 0 ]]; then
  echo "Available commmands (look inside the script to get a better idea of what they do):"
  echo

  # Finds the commands in the code of this script
  grep -o '"[^"]\+" '$'\051' $0 | cut -d\" -f 2

  exit
fi

package=lambda.zip
file="fileb://$name/$package"
runtime="nodejs14.x"
lambda="arn:aws:lambda:$region:$account:function:$name"
role="arn:aws:iam::$account:role/lambda-$name"

tty=(tty)

run () {
  echo "Running: $0 $@" > $(tty) && ./$0 $@
}

case $1 in
  #
  # General utility commands
  #

  "list-lambdas" )
    aws lambda list-functions --region $region
    ;;

  "list-apis" )
    aws apigateway get-rest-apis --region $region
    ;;

  "delete-api" )
    aws apigateway delete-rest-api --region $region --rest-api-id $2
    ;;

  # Commands for managing a specific lambda after this point

  * )
    if [[ $name == "" ]] ; then
      echo "Please run the $0 program located inside the lambda's own directory to use the full range of commands for lambda deployment"
      exit
    fi
    ;;&

  #
  # Main commands
  #

  "create" )
    run create-lambda-role
    run attach-lambda-policy
    run create-lambda
    ;;

  "destroy" )
    run detach-lambda-policy
    run delete-lambda-role
    run delete-lambda
    ;;

  "build" )
    (cd $name ; rm -v $package ; zip -r $package node_modules *.js)
    ;;

  "deploy" )
    ./$0 deploy-lambda
    ;;

  "setup-gateway" )
    api=$(run create-api | tee $tty | jq -r '.id')
    root=$(run get-api-root-resource $api | tee $tty | jq -r '.items[] | select(.path == "/").id')
    run create-api-method $api $root
    run create-gateway-role
    run attach-gateway-policy
    run create-lambda-integration $api $root
    run add-gateway-permission $api
    run deploy-api $api dev

    echo -e "\n -- done --\n\nGateway URL: $(./$0 get-api-url $api dev)"
    echo -e "\napi-id: $api\nroot-resource-id: $root"
    ;;

  "destroy-gateway" )
    run detach-gateway-policy
    run delete-gateway-role
    run revoke-gateway-permission

    ids=$(run list-apis | jq -r ".items[] | select(.name == \"$name\").id")

    # In case there are duplicate gateways remaining from failed setup attempts
    for id in $ids ; do
      run delete-api $id
    done
    ;;

  #
  # Internal AWS functions (use with care)
  #

  "create-lambda-role" )
    aws iam create-role --role-name lambda-$name --assume-role-policy-document file://$name/role-policies/lambda-permission-policy.json
    ;;

  "delete-lambda-role" )
    aws iam delete-role --role-name lambda-$name
    ;;

  "attach-lambda-policy" )
    aws iam attach-role-policy --role-name lambda-$name --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    ;;

  "detach-lambda-policy" )
    aws iam detach-role-policy --role-name lambda-$name --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    ;;

  "create-lambda" )
    aws lambda create-function --region $region --function-name $name --role $role --handler index.handler --runtime $runtime --zip-file $file
    ;;

  "delete-lambda" )
    aws lambda delete-function --region $region --function-name $name
    ;;

  "deploy-lambda" )
    aws lambda update-function-code --region $region --function-name $name --zip-file $file
    ;;

  "create-api" )
    aws apigateway create-rest-api --region $region --name $name
    ;;

  "get-api-root-resource" )
    aws apigateway get-resources --region $region --rest-api-id $2
    ;;

  "create-api-resource" )
    aws apigateway create-resource --region $region --rest-api-id $2 --parent-id $3 --path-part $name
    ;;

  "create-api-method" )
    aws apigateway put-method --region $region --rest-api-id $2 --resource-id $3 --http-method GET --authorization-type NONE --no-api-key-required
    ;;

  "create-gateway-role" )
    aws iam create-role --region $region --role-name gateway-invoke-lambda --assume-role-policy-document file://$name/role-policies/gateway-permission-policy.json
    ;;

  "delete-gateway-role" )
    aws iam delete-role --region $region --role-name gateway-invoke-lambda
    ;;

  "attach-gateway-policy" )
    aws iam attach-role-policy --region $region --role-name gateway-invoke-lambda --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaRole
    ;;

  "detach-gateway-policy" )
    aws iam detach-role-policy --region $region --role-name gateway-invoke-lambda --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaRole
    ;;

  "create-lambda-integration" )
    aws apigateway put-integration --region $region --rest-api-id $2 --resource-id $3 --type AWS_PROXY --http-method GET --integration-http-method POST --uri arn:aws:apigateway:$region:lambda:path/2015-03-31/functions/$lambda/invocations --credentials arn:aws:iam::$account:role/gateway-invoke-lambda
    ;;

  "add-gateway-permission" )
    aws lambda add-permission --region $region --function-name $name --statement-id apigateway-permission --action lambda:InvokeFunction --principal apigateway.amazonaws.com --source-arn "arn:aws:execute-api:$region:$account:$2/*/GET/"
    ;;

  "revoke-gateway-permission" )
    aws lambda remove-permission --region $region --function-name $name --statement-id apigateway-permission
    ;;

  "deploy-api" )
    aws apigateway create-deployment --region $region --rest-api-id $2 --stage-name $3
    ;;

  "get-api-url" ) # args: api-id, stage
    echo https://$2.execute-api.$region.amazonaws.com/$3/
    ;;

  * )
    echo "Command $1 not available"
    ;;
esac
